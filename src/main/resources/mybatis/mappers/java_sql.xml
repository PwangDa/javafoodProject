<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.javafood">

	<!-- 댓글리스트 출력 -->
	<select id="viewComment" resultType="commentDTO" parameterType="String">
		SELECT LEVEL, articleNO, parentNO, comment_num, comment_id, comment_cont, comment_date, myimg
		from comment_com
		WHERE artistname= #{artistname}
		START WITH parentNO=0
		CONNECT BY PRIOR articleNO=parentNO
		ORDER SIBLINGS BY articleNO DESC
	</select>
	
	<!-- 아티스트소개 페이지 -->
	<select id="viewArtist" resultType="albumDTO" parameterType="String">
		SELECT * FROM ALBUM a
		LEFT JOIN INTOALBUM i ON (a.ALBUM_NAME = i.ALBUM_NAME)
		WHERE i.MUSIC_NUM = 1 AND ARTISTNAME = #{artistname}
	</select>
	
	<insert id="plusArtist" parameterType="String">
		insert into album
		(album_num, album_cover, album_name, album_into, artistname, artist_img, artist_info)";
		values(#{album_num}, #{album_cover}, #{album_name}, #{album_into}, #{artistname}, #{artist_img}, #{artist_info})
	</insert>
	
	<!-- 앨범수록곡 출력 -->
	<select id="viewAlbum" resultType="albumDTO" parameterType="String">
		SELECT * FROM ALBUM a
		LEFT JOIN INTOALBUM i ON (a.ALBUM_NAME = i.ALBUM_NAME)
		WHERE a.ALBUM_NAME = #{album_name}
	</select>
	
	<!-- 댓글등록 할 때 -->
	<insert id="plusComment" parameterType="commentDTO">
		insert into comment_com
		(articleno, parentno, comment_num, comment_id, comment_cont, artistlist_num, artistname, myimg)
		values(comment_com_seq.nextval, 0, comment_com_seq1.nextval, #{comment_id}, #{comment_cont}, 0, #{artistname}, #{myimg})
	</insert>
	
	<!-- 대댓글등록 할 때 -->
	<insert id="replyComment" parameterType="commentDTO">
		insert into comment_com
		(articleno, parentno, comment_num, comment_id, comment_cont, artistlist_num, artistname, myimg)
		values(comment_com_seq.nextval, #{parentno}, comment_com_seq1.nextval, #{comment_id}, #{comment_cont}, 0, #{artistname}, #{myimg})
	</insert>
	
	<!-- 댓글삭제 할 때 -->
	<delete id="delComment" parameterType="int">
		DELETE FROM comment_com
		WHERE articleno IN(
		SELECT articleno FROM comment_com 
		START WITH articleno = #{articleNO}
		CONNECT BY PRIOR articleno = parentno )
	</delete>
	
	<!-- main페이지에서 장르별로 랜덤출력 할 때 -->
	<select id="randomGenre" resultType="genreDTO" parameterType="String">
			SELECT * FROM GENRE g 
			WHERE BYGENRE = #{genre}
			ORDER BY SONGNUMBER
	</select>
	
	
	<!-- 인기차트 귀범-->
	<select id="chart" resultType="chartDTO" parameterType="java.util.HashMap">
		
			SELECT * FROM ( 
				SELECT rownum num, genre.* FROM 
					( SELECT RANK() OVER (ORDER BY FAMOUS DESC) 
						AS RANKING, a.* FROM ( SELECT (HITS *1) + (LIKES * 1.5) 
							AS FAMOUS, s.*  FROM Genre s ) a ) genre  WHERE country = #{country }) 
			WHERE num <![CDATA[>=]]> #{start} AND num <![CDATA[<=]]> #{end}
		
	</select>
	
	<!-- 인기차트 페이징 -->
	<select id="totalpage" resultType="int">
		SELECT count(*) cnt FROM  Genre
	</select>
	
	<!-- 장르별-->
	<select id="genre" resultType="genreDTO" parameterType="java.util.HashMap">
		SELECT * FROM (
			SELECT rownum AS rnum, genre.* FROM (
				SELECT * FROM genre
				WHERE BYGENRE = #{genre}
				ORDER BY SONGNUMBER
			) genre
		)
	WHERE rnum <![CDATA[>=]]> #{start} AND rnum<![CDATA[<=]]> #{end}
	</select>
	
	<!-- 장르 페이징 -->
	<select id="pagetotal" resultType="int">
		SELECT count(*) cnt FROM  Genre
	</select>
	
	<!-- 최신 TOP100-->
	<select id="song" resultType="genreDTO" parameterType="java.util.HashMap">
		SELECT * FROM (
			SELECT rownum AS rnum, song1.* FROM (
				SELECT * FROM song1
				ORDER BY SONGNUMBER
			) song1
		)
	WHERE rnum <![CDATA[>=]]> #{start} AND rnum<![CDATA[<=]]> #{end}
	</select>
	
	<!-- 최신음악 페이징 -->
	<select id="pagetotal_song" resultType="int">
		SELECT count(*) cnt FROM song1
	</select>
	
	<!-- 	회원 전체 목록 리스트 -->
	<select id="login" resultType="loginDTO">
		SELECT * FROM login
	</select>
	<!-- 	회원 로그인 정보 확인-->
	<update id="newures" parameterType="loginDTO">
		insert into login values('#{id},#{pwd},#{nic},#{pn},#{phone},#{email},#{img}');
	</update>
	
	
	<!-- 범주 플레이 리스트 불러오기 -->
	<select id="selectPlayList" resultType="playListDTO" parameterType="String">
		SELECT
			pl_title, pl_id, pl_date
		FROM
			playList
		WHERE
			id = #{id}
		ORDER BY
			pl_date DESC
	</select>
	
	<!-- 범주 플레이 리스트 내역(Content) 불러오기 -->
	<select id="selectPlayListContent" resultType="playListDTO" parameterType="String">
	SELECT
			plc.pl_id, plc.listNumber, plc.songName, plc.songNumber,
			g.Link, g.imageLink, g.artistName, g.songName, g.album_name,
			pl.pl_title, pl.pl_explain
			
		FROM
			playList_Content plc, genre g, playList pl
		WHERE
			plc.songNumber = g.songNumber
			AND
			pl.pl_id = plc.pl_id
			AND
			plc.pl_id = #{pl_id}
	</select>
	
	<!-- 범주 플레이 리스트 추가하기 -->
	<insert id="addPlayList" parameterType="hashMap">
		INSERT INTO
			playList(pl_id, id, pl_title, pl_explain)
		VALUES
		(
			seq_pl_id.nextval,
			#{id},
			#{title},
			#{explain}
		)
	</insert>
	
	<!-- 범주 플레이 리스트 내역(Content) 삭제하기 -->
	<update id="deletePlayListContent" parameterType="hashMap">
		DELETE FROM
			playList_Content
		WHERE
			listNumber = #{listNumber}
			AND
			pl_id = #{pl_id}
	</update>
</mapper>