<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.javafood">

	<!-- 댓글리스트 출력 -->
	<select id="viewComment" resultType="commentDTO" parameterType="String">
		SELECT LEVEL, articleNO, parentNO, comment_num, comment_id, comment_cont, comment_date, myimg, id
		from comment_com
		WHERE artistname= #{artistname}
		START WITH parentNO=0
		CONNECT BY PRIOR articleNO=parentNO
		ORDER SIBLINGS BY articleNO DESC
	</select>
		
	<!-- 아티스트소개 페이지 -->
<!-- 	<select id="viewArtist" resultType="albumDTO" parameterType="String">
		SELECT * 
		FROM artist arti
		LEFT JOIN ALBUM_1 al ON (al.ARTISTNAME  = arti.ARTISTNAME)
		LEFT JOIN intoAlbum_1 i ON (al.ALBUM_NAME = i.ALBUM_NAME)
		WHERE i.MUSIC_NUM = 1 AND al.ARTISTNAME = #{artistname}
	</select> -->
	<select id="viewArtist" resultType="albumDTO" parameterType="String">
		SELECT * 
		FROM artist arti, GENRE g
<!-- 		LEFT JOIN GENRE g ON (g.ARTISTNAME  = arti.ARTISTNAME) -->
		WHERE arti.ARTISTNAME LIKE #{artistname} || '%' AND g.ARTISTNAME LIKE #{artistname} || '%'
	</select>
	
	<!-- 각 테이블에 정보 넣는 sql -->
	<insert id="artistplus" parameterType="albumDTO">
		insert into artist
		(artistname, artist_info, artist_img)
		values(#{artistname}, #{artist_info}, #{artist_img})
	</insert>
	<insert id="plusAlbum" parameterType="albumDTO">
		insert into ALBUM_3
		(album_num, album_cover, album_name, album_into, artistname)
		values(al_ss.nextval, #{album_cover}, #{album_name}, #{album_into}, #{artistname})
	</insert>
	<insert id="plusSong" parameterType="albumDTO">
		insert into intoAlbum_2
		(album_num, music_num, music_name, music_link, music_time, album_name)
		values(#{album_num}, #{music_num}, #{music_name}, #{music_link}, #{music_time}, #{album_name})
	</insert>
	
	<!-- 앨범수록곡 출력 -->
	<select id="viewAlbum" resultType="albumDTO" parameterType="String">
		SELECT DISTINCT * FROM ALBUM_3 a
		LEFT JOIN intoAlbum_2 i ON (a.ALBUM_NAME = i.ALBUM_NAME)
		WHERE a.ALBUM_NAME LIKE #{album_name} || '%'
	</select>
	
	<!-- 관리자페이지에서 아티스트 전체목록 조회 시 -->
	<select id="listGenre" resultType="genreDTO">
		SELECT * FROM genre
		ORDER BY SONGNUMBER
	</select>
	<!-- 관리자페이지에서 아티스트 전체목록 조회 시 -->
	<select id="listArtist" resultType="albumDTO">
		SELECT * FROM artist
	</select>
	<!-- 관리자페이지에서 앨범 전체목록 조회 시 -->
	<select id="listAlbum" resultType="albumDTO">
		SELECT DISTINCT * FROM album_3
	</select>
	<!-- 관리자페이지에서 intoAlbum 전체목록 조회 시 -->
	<select id="listIntoAlbum" resultType="albumDTO">
		SELECT * FROM intoAlbum_2
	</select>
	<!-- 관리자페이지에서 댓글리스트 출력 -->
	<select id="listComment" resultType="commentDTO">
		<![CDATA[SELECT LEVEL, articleno, parentno, 
			comment_num, comment_id, 
			LPAD(' ', 4*(LEVEL-1)) || comment_cont as comment_cont,  
			comment_date, artistname, MYIMG, id
			FROM comment_com
			START WITH parentno = 0
			CONNECT BY PRIOR articleno = parentno 
			ORDER siblings BY articleno DESC]]>
	</select>
	
	<!-- 관리자페이지에서 아티스트이름으로 검색할 때 -->
 	<select id="searchArtist" resultType="albumDTO" parameterType="String">
		SELECT * FROM ARTIST
		WHERE ARTISTNAME LIKE #{artistname} || '%'
	</select>
	
	<!-- 댓글등록 할 때 -->
	<insert id="plusComment" parameterType="commentDTO">
		insert into comment_com
		(articleno, parentno, comment_num, comment_id, comment_cont, artistlist_num, artistname, myimg, id)
		values(comment_com_seq.nextval, 0, comment_com_seq1.nextval, #{comment_id}, #{comment_cont}, 0, #{artistname}, #{myimg}, #{id})
	</insert>
	
	<!-- 대댓글등록 할 때 -->
	<insert id="replyComment" parameterType="commentDTO">
		insert into comment_com
		(articleno, parentno, comment_num, comment_id, comment_cont, artistlist_num, artistname, myimg, id)
		values(comment_com_seq.nextval, #{parentNO}, comment_com_seq1.nextval, #{comment_id}, #{comment_cont}, 0, #{artistname}, #{myimg}, #{id})
	</insert>
	
	<!-- 댓글삭제 할 때 -->
	<delete id="delComment" parameterType="int">
		DELETE FROM comment_com
		WHERE articleno IN(
		SELECT articleno FROM comment_com 
		START WITH articleno = #{articleNO}
		CONNECT BY PRIOR articleno = parentno )
	</delete>
	
	<!-- main페이지에서 장르별로 랜덤출력 할 때 -->
	<select id="randomGenre" resultType="genreDTO" parameterType="String">
			SELECT * FROM GENRE g 
			WHERE BYGENRE = #{genre}
			ORDER BY SONGNUMBER
	</select>
	
	<!-- main페이지에서 아티스트 별로 랜덤출력 할 때 -->
	<select id="randomArtist" resultType="albumDTO" parameterType="String">
			SELECT * from
				(SELECT DISTINCT * FROM artist
				ORDER BY dbms_random.value)
				WHERE rownum <![CDATA[<=]]> 10
	</select>
	<!--<select id="randomArtist" resultType="albumDTO" parameterType="String">
		SELECT * FROM artist
	</select>-->
	
	
	<!-- 인기차트 귀범-->
	<select id="chart" resultType="chartDTO" parameterType="java.util.HashMap">
		
			SELECT * FROM ( 
				SELECT rownum num, genre.* FROM 
					( SELECT RANK() OVER (ORDER BY FAMOUS DESC) 
						AS RANKING, a.* FROM ( SELECT (HITS *1) + (LIKES * 1.5) 
							AS FAMOUS, s.*  FROM Genre s ) a ) genre
<!-- 							<if test="country != null"> -->
<!-- 								WHERE country = #{country})  -->
<!-- 							</if> -->
<!-- 							<if test="country == null"> -->
<!-- 								) -->
<!-- 							</if> -->
							<where>
								<if test="country != null">
									country = #{country}
								</if>
							</where>
							)
			WHERE num <![CDATA[>=]]> #{start} AND num <![CDATA[<=]]> #{end}
		
	</select>
	
	<!-- 인기차트 페이징 -->
	<select id="totalpage" resultType="int" parameterType="java.util.HashMap">
		SELECT count(*) cnt FROM  Genre
		<where>
			<if test="country != null">
					country = #{country}
			</if>
		</where>
	</select>
	
	<!-- 댄스 장르 출력 -->
	<select id="selectDance" resultType="chartDTO" parameterType="list">
		SELECT * FROM genre
		WHERE BYGENRE = #{BYGENRE}
		ORDER BY SONGNUMBER
	
	</select>
	
	<!-- 장르별-->
	<select id="genre" resultType="genreDTO" parameterType="java.util.HashMap">
		SELECT * FROM (
			SELECT rownum AS rnum, genre.* FROM (
				SELECT * FROM genre
				WHERE BYGENRE = #{genre}
				ORDER BY SONGNUMBER
			) genre
		)
	WHERE rnum <![CDATA[>=]]> #{start} AND rnum<![CDATA[<=]]> #{end}
	</select>
	
	<!-- 장르 페이징 -->
	<select id="pagetotal" resultType="int" parameterType="String">
		SELECT count(*) cnt FROM  Genre
		WHERE BYGENRE = #{genre}
	</select>
	
	<!-- 최신 TOP100-->
	<select id="song" resultType="genreDTO" parameterType="java.util.HashMap">
		SELECT * FROM (
			SELECT rownum AS rnum, song1.* FROM (
				SELECT * FROM song1
				ORDER BY SONGNUMBER
			) song1
		)
	WHERE rnum <![CDATA[>=]]> #{start} AND rnum<![CDATA[<=]]> #{end}
	</select>
	
	<!-- 최신음악 페이징 -->
	<select id="pagetotal_song" resultType="int">
		SELECT count(*) cnt FROM song1
	</select>
	
	<!-- 	회원 전체 목록 리스트	-->
	<select id="login" resultType="loginDTO">
		SELECT * FROM 
			login
	</select>

	<!-- 	회원 탈퇴	-->
	<delete id="outId" parameterType="String">
		DELETE FROM 
			LOGIN 
		WHERE 
			ID= #{id}
	</delete>
	
<!-- 	회원 아이디값의 조회된 노래 리스트 -->
	<select id="SongHit" resultType="SongHit_DTO" parameterType="String">
		SELECT * FROM SONGHIT s 
		JOIN 
			GENRE g 
		ON 
			s.SONGNUMBER = g.SONGNUMBER 
		WHERE
			s.ID = #{id} 
			ORDER BY s.HIT DESC
	</select>
	
<!-- 	노래 검색 -->
	<select id="search" resultType="genreDTO" parameterType="hashMap">
		SELECT 
			* 
		FROM
			GENRE
		<if test="opt=='song'">
			WHERE 
				SONGNAME LIKE  '%' || #{pot} || '%'
		</if>
		<if test="opt=='man'">
			WHERE 
				artistname LIKE '%' || #{pot} || '%'
		</if>
		
	</select>
	
<!-- 	회원 가입	-->
	<insert id="newures" parameterType="loginDTO">
		insert into 
			login 
		values(
			#{ID},
			#{PWD},
			#{NIC},
			#{PN},
			#{PHONE},
			#{EMAIL},
			null
			)
	</insert>
	
<!-- 	songhit 의 아이디값 불러오기 -->
	<select id="hitid" parameterType="SongHit_DTO" resultType="int">
		SELECT 
			count(*) 
		FROM 
			SONGHIT
		WHERE
			id = #{ID} AND SONGNUMBER = #{SONGNUMBER}
	</select>
	
<!-- 	아이디값 없을시 아이디 추가생성 하고 조회수1 증가-->
	<insert id="hitaddid" parameterType="SongHit_DTO">
		INSERT INTO 
			SONGHIT 
		VALUES (
			#{ID},
			'1',
			#{SONGNUMBER}
			)
	</insert>
	
<!-- 	조회된 아이디의 노래 번호 조회수 증가. -->
	<update id="addsonghit" parameterType="SongHit_DTO">
		UPDATE 
			SONGHIT 
		SET 
			hit = 1+(
				SELECT 
					HIT 
				FROM 
					SONGHIT
				WHERE
					id = #{ID} 
				AND 
					SONGNUMBER = #{SONGNUMBER}
				)
		WHERE 
			id = #{ID} 
		AND 
			SONGNUMBER = #{SONGNUMBER}
	</update>
	
	<select id="hits" parameterType="String" resultType="int">
		SELECT 
			hits 
		FROM 
			GENRE 
		WHERE 
			SONGNUMBER = #{songnum}
	</select>
	
<!-- 	장르테이블의 조회수 증가 -->
	<update id="addgenrehit" parameterType="SongHit_DTO">
		UPDATE 
			GENRE 
		SET 
			hits = 1+(
				SELECT 
					HITs 
				FROM 
					GENRE
				WHERE
					SONGNUMBER = #{SONGNUMBER}
				)
		WHERE SONGNUMBER = #{SONGNUMBER}
	</update>
	
<!-- 	장르의 노래 좋아요증가 -->
	<update id="good" parameterType="String">
		
		UPDATE 
			genre 
		SET 
			likes = 1+(
					SELECT 
						likes 
					FROM
						genre 
					WHERE 
						songnumber = #{song}
					)
		WHERE 
			songnumber = #{song}
		
	</update>
	
<!-- 	회원 정보 수정 -->
	<update id="idUpdate" parameterType="loginDTO">
		UPDATE 
			LOGIN 
		SET 
			NIC=#{NIC}, 
			PWD=#{PWD}, 
			PHONE=#{PHONE}, 
			EMAIL=#{EMAIL}, 
			IMG=#{IMG}  
		WHERE 
			ID =#{ID}
	</update>
	
	<!-- 범주 플레이 리스트 불러오기 -->
	<select id="selectPlayList" resultType="playListDTO" parameterType="String">
		SELECT
			pl.pl_title, pl.pl_id, pl.pl_date, pl.id, pl.listImage
		FROM
			playList pl
		WHERE
			pl.id = #{id}
		ORDER BY
			pl_date DESC
	</select>
	
	<!-- 범주 플레이 리스트 수정하기 -->
	<update id="editPlayList" parameterType="hashMap">
		UPDATE
			playList pl
		SET
			pl.pl_title = #{title},
			pl.pl_explain = #{explain},
			pl.listImage = #{listImage}
		WHERE
			pl.pl_id = #{pl_id}
	</update>
	
	<!-- 범주 플레이 리스트 내역(Content) 불러오기 -->
	<select id="selectPlayListContent" resultType="playListDTO" parameterType="String">
	SELECT
			plc.pl_id, plc.listNumber, plc.songName, plc.songNumber,
			g.Link, g.imageLink, g.artistName, g.songName, g.album_name,
			pl.pl_title, pl.pl_explain
			
		FROM
			playList_Content plc, genre g, playList pl
		WHERE
			plc.songNumber = g.songNumber
			AND
			pl.pl_id = plc.pl_id
			AND
			plc.pl_id = #{pl_id}
	</select>
	
	<!-- 범주 플레이 리스트 추가하기 -->
	<insert id="addPlayList" parameterType="hashMap">
		<if test="listImage != null">
			INSERT INTO
				playList(pl_id, id, pl_title, pl_explain, listImage)
			VALUES
			(
				seq_pl_id.nextval,
				#{id},
				#{title},
				#{explain},
				#{listImage}
			)
		</if>
		<if test="listImage == null">
			INSERT INTO
				playList(pl_id, id, pl_title, pl_explain)
			VALUES
			(
				seq_pl_id.nextval,
				#{id},
				#{title},
				#{explain}
			)
		</if>
	</insert>
	
	<!-- 범주 플레이 리스트 내역(Content) 삭제하기 -->
	<update id="deletePlayListContent" parameterType="hashMap">
		DELETE FROM
			playList_Content
		WHERE
			listNumber = #{listNumber}
			AND
			pl_id = #{pl_id}
	</update>
	
	<!-- 범주 플레이 리스트 삭제하기 -->
	<update id="deletePlayList" parameterType="hashMap">
		DELETE FROM
			playList
		WHERE
			pl_id = #{pl_id}
			AND
			id = #{id}
	</update>
	
	<!-- 범주 인기곡 리스트 불러오기 -->
	<select id="selectHitList" resultType="genreDTO">
		SELECT
			songNumber, artistName, songName, link, album_name, imageLink, album_add, artist_add
		FROM
			song1
		WHERE
			songNumber <![CDATA[<=]]> 40
		ORDER BY
			songNumber
	</select>
	
	<!-- 범주 플레이 리스트에 곡 추가하기 -->
	<insert id="addContent" parameterType="hashMap">
		INSERT INTO
			playList_Content
				(
					pl_id_id,
					pl_id,
					listNumber,
					songName,
					songNumber
				)
			VALUES
				(
					#{pl_id},
					#{pl_id},
					seq_listNumber.nextval,
					(
						SELECT songName
						FROM genre
						WHERE songNumber = #{songNumber}
					),
					#{songNumber}
				)
	</insert>
	
	<!-- 음악 추가 페이지 -->
	<insert id="insert_song" parameterType="genreDTO">
		INSERT INTO Genre (
					SONGNUMBER,
					ARTISTNAME,
					SONGNAME,
					LINK,
					ALBUM_NAME,
					HITS,
					LIKES,
					BYGENRE,
					PLAYTIME,
					IMAGELINK,
					ALBUM_ADD,
					ARTIST_ADD,
					COUNTRY
				)
				values (
					genre_seq.nextval,
					#{artistname},
					#{songname},
				 	#{link},
				 	#{album_name},
				 	0,
				 	0,
				 	#{bygenre},
				 	#{playtime},
				 	#{imagelink},
				 	#{album_add},
				 	#{artist_add},
				 	#{country}
				 )
	</insert>
	
	<!-- 음악 수정-->
	<update id="update_song" parameterType="genreDTO">
		UPDATE 
			genre 
		SET 
			ARTISTNAME = #{artistname},
			SONGNAME = #{songname},
			LINK = #{link},
			ALBUM_NAME = #{album_name},
			BYGENRE = #{bygenre},
			PLAYTIME = #{playtime},
			IMAGELINK = #{imagelink},
			ALBUM_ADD = #{album_add},
			ARTIST_ADD = #{artist_add},
			COUNTRY = #{country}
		WHERE 
			SONGNUMBER = #{songnumber}
	</update>
</mapper>